#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int mincost = -1;
vector<int> minpath;
void dj(vector<vector<int>> v, vector<int> path, set<int> s, int size, int cost, int current, int end)
{
    if (current == end)
    {
        if (mincost == -1 || mincost >= cost)
        {
            mincost = cost;
            minpath = path;
        }
    }
    else
    {
        for (int i = 0; i < size; i++)
        {
            if (!s.count(i) && v[current][i] != -1)
            {
                vector<int> temppath = path;
                set<int> temps = s;
                int tempcost = cost + v[current][i];
                temppath.push_back(i);
                temps.insert(i);
                dj(v, temppath, temps, size, tempcost, i, end);
            }
        }
    }
}
int main()
{
    int size, temp, start, end;
    vector<vector<int>> v;
    cout << "ENTER NUMBER OF NODES :- ";
    cin >> size;
    cout << "ENTER THE VALUES OF ADJACENCY MATRIX :- \n";
    for (int i = 0; i < size; i++)
    {
        vector<int> row;
        for (int j = 0; j < size; j++)
        {
            cout << i << " ----> " << j << " :- ";
            cin >> temp;
            row.push_back(temp);
        }
        v.push_back(row);
    }
    cout << "ENTERED MATRIX IS :- \n";
    for (auto it : v)
    {
        for (auto i : it)
        {
            cout << i << " ";
        }
        cout << "\n";
    }
    cout << "ENTER START NODE AND END NODE :- ";
    cin >> start >> end;
    dj(v, {start}, {start}, size, 0, start, end);
    cout << "\n\nMINIMUM COST IS :- " << mincost;
    cout << "\nMINIMUM PATH IS :- ";
    for (auto it : minpath)
    {
        cout << it << " ";
    }
    return 0;
}
